name: kvoipv2

services:
  change-vol-ownership:
    container_name: kvoipv2-change-vol-ownership
    image: ubuntu
    user: root
    volumes:
      - server-local-data:/tmp/server-local-data
      - docker-data:/tmp/docker-data
    command: >
      bash -c "
      chown -R 1000:1000 /tmp/server-local-data
      && chown -R 1000:1000 /tmp/docker-data"

  server:
    image: kvoipcrm/v2:${TAG:-latest}
    container_name: kvoipv2-server
    volumes:
      - server-local-data:/app/packages/twenty-server/${STORAGE_LOCAL_PATH:-.local-storage}
      - docker-data:/app/docker-data
    ports:
      - "${SERVER_PORT:-3000}:3000"
    environment:
      PORT: 3000
      PG_DATABASE_URL: postgres://${PG_DATABASE_USER:-postgres}:${PG_DATABASE_PASSWORD:-postgres}@${PG_DATABASE_HOST:-db}:${PG_DATABASE_PORT:-5433}/${PG_DATABASE}
      SERVER_URL: ${SERVER_URL}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}

      STORAGE_TYPE: ${STORAGE_TYPE}
      STORAGE_S3_REGION: ${STORAGE_S3_REGION}
      STORAGE_S3_NAME: ${STORAGE_S3_NAME}
      STORAGE_S3_ENDPOINT: ${STORAGE_S3_ENDPOINT}

      APP_SECRET: ${APP_SECRET}

      FRONT_PROTOCOL: ${FRONT_PROTOCOL:-http}
      FRONT_DOMAIN: ${FRONT_DOMAIN:-localhost}
      FRONT_PORT: ${FRONT_PORT:-3000}

      REACT_APP_CHATBOT_BASE_URL: ${REACT_APP_CHATBOT_BASE_URL:-http://localhost:8080}

      DISABLE_DB_MIGRATIONS: ${DISABLE_DB_MIGRATIONS:-true}
    depends_on:
      change-vol-ownership:
        condition: service_completed_successfully
      db:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://localhost:3000/healthz
      interval: 5s
      timeout: 5s
      retries: 10
    restart: on-failure

  worker:
    container_name: kvoipv2-worker
    image: kvoipcrm/v2:${TAG:-latest}
    command: ["yarn", "worker:prod"]
    environment:
      PG_DATABASE_URL: postgres://${PG_DATABASE_USER:-postgres}:${PG_DATABASE_PASSWORD:-postgres}@${PG_DATABASE_HOST:-db}:${PG_DATABASE_PORT:-5432}/${PG_DATABASE}
      SERVER_URL: ${SERVER_URL}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
      DISABLE_DB_MIGRATIONS: "true" # it already runs on the server

      STORAGE_TYPE: ${STORAGE_TYPE}
      STORAGE_S3_REGION: ${STORAGE_S3_REGION}
      STORAGE_S3_NAME: ${STORAGE_S3_NAME}
      STORAGE_S3_ENDPOINT: ${STORAGE_S3_ENDPOINT}

      APP_SECRET: ${APP_SECRET}
    depends_on:
      db:
        condition: service_healthy
      server:
        condition: service_healthy
    restart: always

  db:
    container_name: kvoipv2-pg
    image: ankane/pgvector:latest
    volumes:
      - db_data:/home/postgres/pgdata
      - ./kvoip-postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      POSTGRES_USER: ${PG_DATABASE_USER:-postgres}
      POSTGRES_PASSWORD: ${PG_DATABASE_PASSWORD:-postgres}
      POSTGRES_DB: ${PG_DATABASE:-postgres}
    ports: 
      - "5433:5432"
    healthcheck:
      test: pg_isready -U ${PG_DATABASE_USER:-postgres} -h db -d postgres
      interval: 5s
      timeout: 5s
      retries: 10
    restart: always

  redis:
    container_name: kvoipv2-redis
    image: redis
    restart: always

volumes:
  docker-data:
  db_data:
  server-local-data:
